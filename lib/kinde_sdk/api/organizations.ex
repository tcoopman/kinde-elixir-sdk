# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule KindeSDK.Api.Organizations do
  @moduledoc """
  API calls for all endpoints tagged `Organizations`.
  """

  alias KindeSDK.Connection
  import KindeSDK.RequestBuilder

  @doc """
  Assign Users to an Organization
  Add existing users to an organization.

  ### Parameters

  - `connection` (KindeSDK.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:code` (String.t): The organization's code.
    - `:body` (AddOrganizationUsersRequest): 

  ### Returns

  - `{:ok, KindeSDK.Model.AddOrganizationUsers200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_organization_users(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, KindeSDK.Model.AddOrganizationUsers200Response.t} | {:error, Tesla.Env.t}
  def add_organization_users(connection, opts \\ []) do
    optional_params = %{
      :code => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/v1/organization/users")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KindeSDK.Model.AddOrganizationUsers200Response},
      {204, false},
      {400, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Create Organization
  Create an organization.

  ### Parameters

  - `connection` (KindeSDK.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:body` (CreateOrganizationRequest): Organization details.

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_organization(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def create_organization(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/api/v1/organization")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false},
      {403, false},
      {404, false},
      {500, false}
    ])
  end

  @doc """
  List Organizations
  Get a list of organizations. 

  ### Parameters

  - `connection` (KindeSDK.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:sort` (String.t): Field and order to sort the result by.
    - `:page_size` (integer()): Number of results per page. Defaults to 10 if parameter not sent.
    - `:next_token` (String.t): A string to get the next page of results if there are more results.

  ### Returns

  - `{:ok, [%Organization{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_orgainzations(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [KindeSDK.Model.Organization.t]} | {:error, Tesla.Env.t}
  def get_orgainzations(connection, opts \\ []) do
    optional_params = %{
      :sort => :query,
      :page_size => :query,
      :next_token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/v1/organizations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KindeSDK.Model.Organization},
      {403, false}
    ])
  end

  @doc """
  Get Organization
  Gets an organization given the organization's code. 

  ### Parameters

  - `connection` (KindeSDK.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:code` (String.t): The organization's code.

  ### Returns

  - `{:ok, KindeSDK.Model.Organization.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_organization(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, KindeSDK.Model.Organization.t} | {:error, Tesla.Env.t}
  def get_organization(connection, opts \\ []) do
    optional_params = %{
      :code => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/v1/organization")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KindeSDK.Model.Organization},
      {400, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  List Organization Users
  Get users in an organizaiton.

  ### Parameters

  - `connection` (KindeSDK.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:sort` (String.t): Field and order to sort the result by.
    - `:page_size` (integer()): Number of results per page. Defaults to 10 if parameter not sent.
    - `:next_token` (String.t): A string to get the next page of results if there are more results.
    - `:code` (String.t): The organization's code.

  ### Returns

  - `{:ok, KindeSDK.Model.OrganizationUser.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_organization_users(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, KindeSDK.Model.OrganizationUser.t} | {:error, Tesla.Env.t}
  def get_organization_users(connection, opts \\ []) do
    optional_params = %{
      :sort => :query,
      :page_size => :query,
      :next_token => :query,
      :code => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/api/v1/organization/users")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KindeSDK.Model.OrganizationUser},
      {403, false}
    ])
  end

  @doc """
  Remove Users from an Organization
  Remove existing users from an organization.

  ### Parameters

  - `connection` (KindeSDK.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:code` (String.t): The organization's code.
    - `:body` (RemoveOrganizationUsersRequest): 

  ### Returns

  - `{:ok, KindeSDK.Model.RemoveOrganizationUsers200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec remove_organization_users(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, KindeSDK.Model.RemoveOrganizationUsers200Response.t} | {:error, Tesla.Env.t}
  def remove_organization_users(connection, opts \\ []) do
    optional_params = %{
      :code => :query,
      :body => :body
    }

    request =
      %{}
      |> method(:patch)
      |> url("/api/v1/organization/users")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, KindeSDK.Model.RemoveOrganizationUsers200Response},
      {204, false},
      {400, false},
      {403, false},
      {404, false}
    ])
  end
end
